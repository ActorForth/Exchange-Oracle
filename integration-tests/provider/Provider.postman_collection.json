{
	"info": {
		"_postman_id": "6c40fed5-45f3-4199-a32b-2ee78198cf99",
		"name": "Provider",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create order (Happy case) THB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"order_id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_amount\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_denomination\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"address\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"time_created\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_exchange_rate_for_order\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_requested\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_received\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_remaining\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_overpayment\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_transactions\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"uri\": {",
							"            \"type\": \"string\"",
							"        }     ",
							"    },",
							"    \"required\": [",
							"                \"order_id\",",
							"        \"order_amount\",",
							"        \"order_denomination\",",
							"        \"status\",",
							"        \"address\",",
							"        \"time_created\",",
							"        \"bch_exchange_rate_for_order\",",
							"        \"bch_amount_requested\",",
							"        \"bch_amount_received\",",
							"        \"bch_amount_remaining\",",
							"        \"bch_amount_overpayment\",",
							"        \"bch_transactions\",",
							"        \"uri\"",
							"    ]",
							"}",
							"",
							"pm.test(\"Validate jsonSchema\" , () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check order id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_id).to.eql(pm.variables.get(\"guid\"));",
							"});",
							"",
							"pm.test(\"Check order amount\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_amount).to.eql(\"100\");",
							"});",
							"",
							"pm.test(\"Check order currency\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_denomination).to.eql(\"THB\");",
							"});",
							"",
							"pm.globals.set(\"created_guid\", pm.response.json().order_id);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"amount\": 100, \"denomination\": \"THB\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order (Happy case) USD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"order_id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_amount\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_denomination\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"address\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"time_created\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_exchange_rate_for_order\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_requested\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_received\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_remaining\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_overpayment\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_transactions\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"uri\": {",
							"            \"type\": \"string\"",
							"        }     ",
							"    },",
							"    \"required\": [",
							"                \"order_id\",",
							"        \"order_amount\",",
							"        \"order_denomination\",",
							"        \"status\",",
							"        \"address\",",
							"        \"time_created\",",
							"        \"bch_exchange_rate_for_order\",",
							"        \"bch_amount_requested\",",
							"        \"bch_amount_received\",",
							"        \"bch_amount_remaining\",",
							"        \"bch_amount_overpayment\",",
							"        \"bch_transactions\",",
							"        \"uri\"",
							"    ]",
							"}",
							"",
							"pm.test(\"Validate jsonSchema\" , () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check order id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_id).to.eql(pm.variables.get(\"guid\"));",
							"});",
							"",
							"pm.test(\"Check order amount\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_amount).to.eql(\"100\");",
							"});",
							"",
							"pm.test(\"Check order currency\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_denomination).to.eql(\"USD\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"amount\": 100, \"denomination\": \"USD\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order without amount (Bad case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"detail\"",
							"    ],",
							"    \"properties\": {",
							"        \"detail\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"required\": [",
							"                    \"loc\",",
							"                    \"msg\",",
							"                    \"type\"",
							"                ],",
							"                \"properties\": {",
							"                    \"loc\": {",
							"                        \"type\": \"array\",",
							"                    },",
							"                    \"msg\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"type\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                }",
							"            }",
							"        }",
							"    }",
							"}",
							"",
							"pm.test(\"Validate jsonSchema\" , () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"denomination\": \"USD\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order without denomination (Bad case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"detail\"",
							"    ],",
							"    \"properties\": {",
							"        \"detail\": {",
							"            \"type\": \"array\",",
							"            \"items\": {",
							"                \"required\": [",
							"                    \"loc\",",
							"                    \"msg\",",
							"                    \"type\"",
							"                ],",
							"                \"properties\": {",
							"                    \"loc\": {",
							"                        \"type\": \"array\",",
							"                    },",
							"                    \"msg\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"type\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                }",
							"            }",
							"        }",
							"    }",
							"}",
							"",
							"pm.test(\"Validate jsonSchema\" , () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"amount\": \"100\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with unsupported currency (Bad case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"unsupported denomination\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"amount\": \"100\" , \"denomination\": \"test\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order details (Happy case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"order_id\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_amount\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"order_denomination\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"address\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"time_created\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_exchange_rate_for_order\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_requested\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_received\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_remaining\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_amount_overpayment\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"bch_transactions\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"uri\": {",
							"            \"type\": \"string\"",
							"        }     ",
							"    },",
							"    \"required\": [",
							"                \"order_id\",",
							"        \"order_amount\",",
							"        \"order_denomination\",",
							"        \"status\",",
							"        \"address\",",
							"        \"time_created\",",
							"        \"bch_exchange_rate_for_order\",",
							"        \"bch_amount_requested\",",
							"        \"bch_amount_received\",",
							"        \"bch_amount_remaining\",",
							"        \"bch_amount_overpayment\",",
							"        \"bch_transactions\",",
							"        \"uri\"",
							"    ]",
							"}",
							"",
							"pm.test(\"Validate jsonSchema\" , () => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"})",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check order id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.order_id).to.eql(pm.variables.get(\"created_guid\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/{{created_guid}}",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"{{created_guid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order details with incorrect order id (Bad case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"order not found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"guid\" , pm.variables.replaceIn(\"{{$guid}}\"))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://crypto.dev.biggestfan.net/crypto-provider/api/order/test",
					"protocol": "https",
					"host": [
						"crypto",
						"dev",
						"biggestfan",
						"net"
					],
					"path": [
						"crypto-provider",
						"api",
						"order",
						"test"
					]
				}
			},
			"response": []
		}
	]
}